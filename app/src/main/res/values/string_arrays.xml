<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string-array name="headers">
        <item>Начинай с малого – пиши чистые и понятные функции.</item>
        <item>Комментируй код, но не переусердствуй.</item>
        <item>Используй систему контроля версий (Git).</item>
        <item>Изучи горячие клавиши в своей IDE.</item>
        <item>Пиши тесты для своего кода.</item>
        <item>Освой принцип DRY (Don’t Repeat Yourself).</item>
        <item>Регулярно делай рефакторинг.</item>
        <item>Изучи ООП (объектно-ориентированное программирование).</item>
        <item>Оптимизируй запросы к базе данных.</item>
        <item>Освой отладку (debugging).</item>
        <item>Изучи базовые структуры данных (массивы, списки, хеш-таблицы).</item>
        <item>Научись работать с асинхронным кодом (Promise, async/await).</item>
        <item>Оптимизируй алгоритмы (Big O нотация).</item>
        <item>Используй контейнеризацию (Docker).</item>
        <item>Настрой CI/CD (GitHub Actions, Jenkins).</item>
        <item>Изучи SOLID-принципы.</item>
        <item>Научись профилировать код.</item>
        <item>Используй шаблоны проектирования (Design Patterns).</item>
        <item>Учись работать с API (REST, GraphQL).</item>
        <item>Настрой линтеры (ESLint, Pylint).</item>
        <item>Изучи функциональное программирование.</item>
        <item>Оптимизируй фронтенд (ленивая загрузка, кэширование).</item>
        <item>Научись работать с WebSockets.</item>
        <item>Используй кэширование (Redis, Memcached).</item>
        <item>Изучи основы безопасности (SQL-инъекции, XSS).</item>
        <item>Настрой логирование (ELK, Winston).</item>
        <item>Используй TypeScript вместо JavaScript.</item>
        <item>Автоматизируй рутину (скрипты, макросы).</item>
        <item>Участвуй в open-source проектах.</item>
        <item>Не забывай отдыхать!</item>
    </string-array>
    <string-array name="descriptions">
        <item>Чем проще код, тем легче его поддерживать. Дели большие задачи на маленькие функции с одной ответственностью.</item>
        <item>Комментарии должны объяснять почему, а не что делает код. Избегай избыточных комментариев.</item>
        <item>Git помогает отслеживать изменения, возвращаться к предыдущим версиям и работать в команде.</item>
        <item>Экономия времени на рутинных операциях (навигация, рефакторинг, отладка).</item>
        <item>Тесты помогают находить ошибки на ранних этапах и делают код надежнее.</item>
        <item>Избегай дублирования кода – выноси повторяющиеся части в отдельные функции/модули.</item>
        <item>Улучшай структуру кода без изменения функционала.</item>
        <item>ООП помогает создавать масштабируемые и модульные программы.</item>
        <item>Избегай N+1 проблем, используй индексы и кэширование.</item>
        <item>Умение находить и исправлять ошибки – ключевой навык программиста.</item>
        <item>Понимание структур данных помогает писать эффективный код. Например, хеш-таблицы дают O(1) для вставки и поиска.</item>
        <item>Асинхронность предотвращает блокировку основного потока. В JS используй async/await вместо callback hell.</item>
        <item>Оценивай сложность алгоритмов (O(1), O(n), O(n²)) и выбирай оптимальные решения.</item>
        <item>Docker упрощает развертывание приложений и управление зависимостями.</item>
        <item>Автоматизируй тестирование и деплой, чтобы быстрее выпускать обновления.</item>
        <item>Эти принципы (например, Single Responsibility) помогают писать поддерживаемый код.</item>
        <item>Инструменты вроде Chrome DevTools или cProfile в Python помогают находить узкие места.</item>
        <item>Singleton, Factory, Observer и другие паттерны решают типичные проблемы проектирования.</item>
        <item>REST использует HTTP-методы, а GraphQL позволяет запрашивать только нужные данные.</item>
        <item>Линтеры автоматически находят ошибки стиля и потенциальные баги.</item>
        <item>Функции без побочных эффектов и иммутабельность упрощают тестирование.</item>
        <item>Ленивая загрузка изображений и кэширование ускоряют загрузку страниц.</item>
        <item>WebSockets позволяют обмениваться данными в реальном времени (чаты, уведомления).</item>
        <item>Кэширование снижает нагрузку на БД и ускоряет работу приложений.</item>
        <item>Всегда валидируй ввод пользователя и используй параметризованные запросы.</item>
        <item>Логи помогают анализировать ошибки и поведение пользователей.</item>
        <item>TypeScript добавляет статическую типизацию, уменьшая количество runtime-ошибок.</item>
        <item>Скрипты на Bash/Python экономят часы ручной работы.</item>
        <item>Это помогает учиться у других и строить портфолио.</item>
        <item>Перерывы повышают продуктивность и креативность.</item>
    </string-array>
</resources>